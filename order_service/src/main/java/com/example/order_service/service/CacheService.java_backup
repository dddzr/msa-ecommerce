package com.example.order_service.service;

import java.io.UnsupportedEncodingException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.core.Cursor;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ScanOptions;
import org.springframework.stereotype.Service;

import com.example.order_service.dto.CachedDelivery;
import com.example.order_service.dto.OrderDetail;
import com.example.order_service.dto.OrderItemDetail;
import com.example.order_service.dto.OrderSummary;
import com.example.order_service.dto.CachedPayment;
import com.example.order_service.dto.ProductDetail;
import com.example.order_service.entity.Orders;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class CacheService {

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;
    @Autowired
    private ObjectMapper objectMapper;

    // 캐시에서 데이터 조회
    public Object getFromCache(String key) {
        return redisTemplate.opsForValue().get(key);
    }

    // 캐시에 데이터 저장
    public void saveToCache(String key, Object value) {
        redisTemplate.opsForValue().set(key, value);
    }

    // 캐시 삭제
    public void deleteFromCache(String key) {
        redisTemplate.delete(key);
    }

    // *조회할 때 합성
    public OrderDetail getOrderDetail(int orderId) { // Hash-Hash 데이터 모델 (Parent-Child 관계)
        String orderKey = "order:" + orderId;
        String deliveryKey = "delivery:" + orderId;
        String paymentKey = "payment:" + orderId;

        OrderDetail orderDetail = (OrderDetail) redisTemplate.opsForValue().get(orderKey);
        if (orderDetail == null) {
            // 캐시가 없으면 DB에서 조회
            // 주문 데이터 조회 및 캐시 저장
        }
        for(OrderItemDetail itemDetail: orderDetail.getOrderItems()){
            String productKey = "product:" + itemDetail.getOrderItemId();
            ProductDetail productDetail = (ProductDetail) redisTemplate.opsForValue().get(productKey);
            if(productDetail == null){

            }
            itemDetail.setProductDetail(productDetail);
        }

        CachedDelivery deliveryDetail = (CachedDelivery) redisTemplate.opsForValue().get(deliveryKey);
        CachedPayment paymentDetail = (CachedPayment) redisTemplate.opsForValue().get(paymentKey);
        if (deliveryDetail == null) {
        }

        if (paymentDetail == null) {
        }

        // OrderDetail 합성
        orderDetail.setDelivery(deliveryDetail);
        orderDetail.setPayment(paymentDetail);

        return orderDetail;
    }

    // 목록 한 번에 저장 (캐시에 없어서 DB에서 리스트 조회했을 때)
    public void saveCustomerOrders(int userId, List<OrderSummary> orderSummaries) {
        String cacheKey = "orderList:" + userId;
        redisTemplate.delete(cacheKey); // 기존 데이터 삭제 (덮어쓰기 방지)
        redisTemplate.opsForList().rightPushAll(cacheKey, orderSummaries);
    }
    
    // *추가할 때 합성
    // 목록 하나씩 추가 (주문이 생성될 때 추가, 배송/결제 시스템에 의해 수정된다.)
    public void addOrderToCache(OrderSummary orderSummary) {
        int orderId = orderSummary.getOrderId();
        int userId = orderSummary.getUserId();
        long timestamp = System.currentTimeMillis();

        // String orderKey = "orderDetail:" + orderId;
        // redisTemplate.opsForList().rightPush(orderKey, orderDetail);

        // 주문 목록 저장용 OrderSummary 생성
        // OrderSummary orderSummary = new OrderSummary();
        // BeanUtils.copyProperties(orderDetail, orderSummary); // 필드 복사

        String customerKey = "orderList:" + userId;
        redisTemplate.opsForZSet().add(customerKey, orderSummary, timestamp);

        String sellerKey = "allOrder";
        redisTemplate.opsForZSet().add(sellerKey, orderSummary, timestamp);

        // 상품별 주문 목록 필요 시
        // String productKey = "orderList:" + productId;
        // redisTemplate.opsForZSet().add(productKey, orderSummary, timestamp);
    }
    
    /* 변동 잦고 개별적인 데이터를 캐시에 저장하는 건 적합하지 않다고 한다. */
    // 주문 목록 조회 (구매자용)
    public List<OrderSummary> getCustomerOrders(int userId, int page, int pageSize) {
        List<OrderSummary> orderSummaries = new ArrayList<>();
        int startIndex = (page - 1) * pageSize;
        int endIndex = startIndex + pageSize;

        String cacheKey = "orderList:" + userId;
        Set<Object> rawData = redisTemplate.opsForZSet().reverseRange(cacheKey, startIndex, endIndex - 1); // 내림차순

        // 변환: Object → OrderDetail
        if(rawData != null){
            orderSummaries = rawData.stream()
            .map(obj -> objectMapper.convertValue(obj, OrderSummary.class))
            .collect(Collectors.toList());
        }
        return orderSummaries;
    }

    // 전체 주문 목록 (관리자용)
    public List<OrderSummary> getSellerOrders(Integer userId, Integer productId, Long startDate, Long endDate, int page, int pageSize) {
        List<OrderSummary> allOrders = new ArrayList<>();
        int startIndex = (page - 1) * pageSize;
        int endIndex = startIndex + pageSize;

        String cacheKey = "allOrder";
        
        // 필터 적용
        if (userId != null) {
            cacheKey = "orderList:user:" + userId;
        }else if (productId != null) {
            cacheKey = "orderList:product:" + productId;
        }

        Set<Object> rawData;
        if (startDate != null && endDate != null) {
            rawData = redisTemplate.opsForZSet().reverseRangeByScore(cacheKey, startDate, endDate, startIndex, endIndex);
        } else {
            rawData = redisTemplate.opsForZSet().reverseRange(cacheKey, startIndex, endIndex);
        }
        
        if (rawData != null) {
            allOrders = rawData.stream()
            .map(obj -> objectMapper.convertValue(obj, OrderSummary.class))
            .collect(Collectors.toList());
        }
        
        return allOrders;
    }

        // 예시코드: 고객, 관리자용 데이터 하나로 관리 할 경우 (allOrders 저장x일때)
    // public List<OrderDetail> getSellerOrders(int page, int pageSize) {
    //     List<OrderDetail> allOrders = new ArrayList<>();
    //     int startIndex = (page - 1) * pageSize; // 시작 위치
    //     int endIndex = startIndex + pageSize;   // 끝 위치

    //     // Redis SCAN 명령어를 사용하여 특정 패턴의 키 조회
    //     ScanOptions scanOptions = ScanOptions.scanOptions()
    //             .match("customerOrderDetail:*") // 특정 패턴 검색
    //             .count(100) // 한번에 가져올 키 개수
    //             .build();

    //* 키는 범위 지정해서 못 들고와서 다 들고 온 다음 카운트 세어야함. count 지정하지 않으면 10개
    // *count는 Redis가 한 번에 얼마나 많은 키를 스캔할지에 대한 예상 값이지, 실제로 반환되는 키의 개수는 count에 제한되지 않습니다.
    // *SCAN은 키를 점진적으로 반환합니다. 즉, 처음에 100개를 반환하고, 그 다음에 또 100개를 반환

    //     RedisConnection connection = Objects.requireNonNull(redisTemplate.getConnectionFactory()).getConnection();
    //     Cursor<byte[]> cursor = connection.keyCommands().scan(scanOptions);
            
    //     int index = 0;
    //     while (cursor.hasNext()) {
    //         if (index >= endIndex) break; // 필요한 개수만큼 가져오면 중단
    //         String key;
    //         try {
    //             key = new String(cursor.next(), "UTF-8");
                
    //             if (index >= startIndex) { // 필요한 범위의 데이터만 가져오기
    //                 List<Object> orderData = redisTemplate.opsForList().range(key, 0, -1);
    //                 if (orderData != null) {
    //                     orderData.forEach(obj -> allOrders.add((OrderDetail) obj));
    //                 }
    //             }
    //             index++;
    //         } catch (UnsupportedEncodingException e) {
    //             e.printStackTrace();
    //         }
    //     }
    //     return allOrders;
    // }
}
