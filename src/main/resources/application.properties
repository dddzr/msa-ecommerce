server.port=8080
spring.application.name=gateway

# Eureka 서버 URL (Eureka와 연동 시)
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
# Eureka 서비스 등록을 통한 동적 라우팅 활성화
spring.cloud.gateway.discovery.locator.enabled=true 
# eureka server registry에 현재 애플리케이션 자신의 정보를 등록할지 (다른 서비스들이 name으로 접근가능)
eureka.client.registerWithEureka=true
# registry에 있는 정보(등록된 서비스 목록)들을 가져올지 여부
eureka.client.fetchRegistry=true

#Actuator 엔드포인트 활성화
management.endpoints.web.exposure.include=*

# Spring Cloud Gateway 설정 (주석해도 의존성 자동 감지)
# spring.main.web-application-type=reactive

#Eureka 서비스 디스커버리와 통합
# uri=lb://MY-SERVICE-NAME는 Eureka에서 등록된 서비스 이름을 사용하여 해당 서비스의 여러 인스턴스에 대해 로드 밸런싱을 수행.
# spring.cloud.gateway.routes[0].id=to_service1
# spring.cloud.gateway.routes[0].uri=lb://SERVICE-1
# # Eureka 없이 테스트 # 여러 서버 인스턴스 지정
# # spring.cloud.gateway.routes[0].uri=http://localhost:8081,http://localhost:8082
# spring.cloud.gateway.routes[0].predicates[0]=Path=/service1/**
# spring.cloud.gateway.routes[0].filters[0]=AddRequestHeader=X-Gateway-Header, Gateway-Value

# 구글 연동
# spring.security.oauth2.client.registration.google.client-id=your-client-id
# spring.security.oauth2.client.registration.google.client-secret=your-client-secret
# spring.security.oauth2.client.registration.google.scope=profile,email
# spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
# spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
# spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo

# 로그
# logging.level.org.springframework.cloud.gateway.routes=DEBUG
# logging.level.org.springframework.cloud.gateway.handler=DEBUG
# logging.level.org.springframework.cloud.gateway.filter=DEBUG
# logging.level.com.netflix.eureka=DEBUG
# logging.level.org.springframework=DEBUG
# logging.level.com.example.gateway=DEBUG
logging.level.org.springframework.security=DEBUG
# logging.level.org.springframework.boot.actuate=DEBUG
